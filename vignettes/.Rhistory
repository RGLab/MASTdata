rm(list=ls())
suppressPackageStartupMessages({
library(GGally)
library(grid)
library(ggplot2)
library(reshape2)
library(org.Hs.eg.db)
library(plyr)
library(glasso)
library(data.table)
library(GO.db)
library(hom.Hs.inp.db)
library(MAST)
library(Matrix)
library(igraph)
library(ggplot2)
library(RColorBrewer)
library(org.Mm.eg.db)
library(GSEABase)
library(corpcor)
library(Rtsne)
library(MASTDataPackage)
})
data(MASTDataPackage)
data_dir <- "data"
if(packageVersion("MAST")>="0.927"){
message("Version Okay")
}else{
stop("Wrong SingleCellAssay Version")
}
FCTHRESHOLD<-log2(1.5)
plotheme<-theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.line=element_line(colour="black"))
knitr::opts_chunk$set(list(echo=FALSE,eval=TRUE,message=FALSE,error=FALSE,warning=FALSE,fig.width=10,fig.height=8,dev=c("png")))
filtered<-sca_alex
percent_expressed<-0.1
thres<-"adapt"
tt <- thresholdSCRNACountMatrix(2^exprs(filtered) - 1, nbins = 20, min_per_bin = 30)
if (thres == "adapt") {
exprs(filtered) <- tt$counts_threshold
} else if (thres == "fixed") {
mat <- exprs(filtered)
mat[mat < 1/log(2)] <- 0
exprs(filtered) <- mat
}
expressed_genes <- colMeans(exprs(filtered) > 0) > percent_expressed
filtered <- filtered[, expressed_genes]
data <- exprs(filtered)
cd <- cData(filtered)
fd <- fData(filtered)
dt <- data.table(gene_id = fd$symbolid, t(data))
dt_long <- data.table(melt(dt))
load("../inst/extdata/clusters_shalek.rda")
CORE_ANTIVIRAL<-as.character(subset(clusters,CLUSTER=="Id")$GENE)
PEAKED_INFLAM<-as.character(subset(clusters,CLUSTER=="IIIc")$GENE)
SUSTAINED_INFLAM<-as.character(subset(clusters,CLUSTER=="IIId")$GENE)
ids=featureData(filtered)$primerid
ids.idx <- 1:length(ids)
#get all the GO IDS for all the genes
sym2go<-AnnotationDbi:::select(org.Mm.eg.db,keys=gsub("^(.)","\\U\\1",tolower(ids),perl=TRUE),columns="GOALL",keytype="SYMBOL")
sym2go <- na.omit(sym2go)
sym2go <- data.table(sym2go)
ids <- data.table(cbind(ids,ids.idx))
setkey(ids,ids)
sym2go=sym2go[,ids:=SYMBOL]
setkey(sym2go,ids)
sym2go <- merge(ids,sym2go)
#module_member is the gene index for the given module
BP <- sym2go[ONTOLOGYALL%in%"BP"]
BP <- BP[,module_member:=ids.idx,list(GOALL)]
cData(filtered)$Stim <- factor(cData(filtered)$Stim,levels=c("Unstimulated","LPS","PAM","PIC"))
cData(filtered)$Time <- factor(cData(filtered)$Time)
filtered_nobaseline <- subset(filtered,!Stim%in%c("Unstimulated")) #drop Time 0
cData(filtered_nobaseline)$Stim <- factor(cData(filtered_nobaseline)$Stim)
cData(filtered_nobaseline)$Time <- factor(cData(filtered_nobaseline)$Time)
options(mc.cores=8)
fit.bystim <- zlm.SingleCellAssay(~cngeneson+Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE,hook=deviance_residuals_hook,lambda=0.1)
fit<-fit.bystim
options(mc.cores=7)
#Fit a model without ngeneson for comparison
fit.bystim.nongeneson <- zlm.SingleCellAssay(~Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE,hook=deviance_residuals_hook,lambda=0.1)
library(data.table)
library(limma)
library(GO.db)
gene_association= fread("../inst/extdata/gene_association.mgi",skip=6)
geneset_id      = split(toupper(gene_association$V3), gene_association$V5)
geneset_terms   = Term(GOTERM)[names(geneset_id)]
geneset_index   = ids2indices(geneset_id, fData(filtered_nobaseline)$symbolid)
#GSEA
options(mc.cores=7)
cache(boot_shalek <- bootVcov1(zlmfit=fit,R=100))
sets<-list()
sets[["CORE_ANTIVIRAL"]] <- CORE_ANTIVIRAL
sets[["CORE_ANTIVIRAL"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["CORE_ANTIVIRAL"]])
sets[["PEAKED_INFLAM"]] <- PEAKED_INFLAM
sets[["PEAKED_INFLAM"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["PEAKED_INFLAM"]])
sets[["SUSTAINED_INFLAM"]] <- SUSTAINED_INFLAM
sets[["SUSTAINED_INFLAM"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["SUSTAINED_INFLAM"]])
#Load the blood transcriptional modules
load("../inst/extdata/emory_blood_transcript_modules.rda")
gene_names <- rownames(coef(fit,"D"))
for(i in seq_along(emory_blood_transcript_modules)){
sets[[names(emory_blood_transcript_modules)[i]]] <- which(gene_names%in%emory_blood_transcript_modules[[i]])
}
sets<-c(sets,geneset_index)
colnames(coef(fit,"D"))
hyp <- lapply(colnames(coef(fit,"D"))[colnames(coef(fit,"D"))%like%"Time"],function(x)CoefficientHypothesis(x))
sets<-sets[names(which(unlist(lapply(sets,length))>5))] #at least 5 genes
cache(gsea.time <- lapply(hyp,function(x)gseaAfterBoot(fit,boot_shalek,sets,hypothesis=x,control = list(n_randomize = Inf,var_estimate = "bootall"))))
summarizeGSEA <- function(gsea){
stats <- calcZ(gsea,testType="normal",combined="stouffer")
stats2 <- calcZ(gsea,testType="t")
stats <- reshape2::melt(stats)
stats2<-reshape2::melt(stats2)
stats <- setnames(stats,c("module","variable","value"))
stats <- dcast(stats,module~variable)
stats2<-dcast(stats2,set~comp+metric)
setnames(stats2,"set","module")
stats<-merge(stats,stats2,by="module")
return(stats)
}
#' Combine into one table
toplot <- lapply(gsea.time,summarizeGSEA)
names(toplot)<-colnames(coef(fit,"D"))[colnames(coef(fit,"D"))%like%"Time"]
toplot<-data.table(ldply(toplot))
setnames(toplot,".id","coefficient")
#GO
toplot=toplot[module%like%"GO:"|module%in%c("CORE_ANTIVIRAL","PEAKED_INFLAM","SUSTAINED_INFLAM")]
#BTM
#toplot=toplot[!module%like%"GO:"&!module%in%c("CORE_ANTIVIRAL","PEAKED_INFLAM","SUSTAINED_INFLAM")]
toplot = toplot[,adjp := p.adjust(P,"fdr"),]
toplot=toplot[module%in%c(unique(unlist(lapply(gsea.time,function(x)unique(c(names(which(abs(x[,"disc","stat","test"]-x[,"disc","stat","null"])>1)),names(which(abs(x[,"cont","stat","test"]-x[,"cont","stat","null"])>log2(1.5)))))  ))),"SUSTAINED_INFLAM","CORE_ANTIVIRAL","PEAKED_INFLAM")]
#Map go ids to descriptions
ids <- as.character(unique(toplot[,module]))
GOID_terms <- select(GO.db,keys = ids,columns = "TERM",keytype = "GOID")
#Merge with gsea results based on GOID
GOID_terms <- data.table(GOID_terms)
setkey(GOID_terms,GOID)
setnames(toplot,"module","GOID")
setkey(toplot,GOID)
toplot <- merge(toplot,GOID_terms)
toplot = toplot[,TERM := ifelse(is.na(TERM),GOID,TERM)]
toplot = toplot[,Stim := factor(gsub(":.+","",coefficient))]
#toplot = toplot[,adjp := p.adjust(P,"fdr"),]
toplot = toplot <- na.omit(toplot)
toplot = toplot[,include := any(adjp < 1e-20),list(TERM)]
#BTM
#toplot <- toplot[!TERM %like% "TBA"&!GOID%like%"GO"&!GOID%in%c("SUSTAINED_INFLAM","PEAKED_INFLAM","CORE_ANTIVIRAL")]
toplot <- toplot[!TERM %like% "TBA"]
o <- order(toplot[include == TRUE,sum((Z))/sqrt(length(Z)),TERM]$V1)
levs <- toplot[include == TRUE,TERM,TERM]$TERM
toplot = toplot[,coefficient := factor(toplot$coefficient)]
MELTED <- data.table(melt(toplot[coefficient  %like% "LPS" & include == TRUE],id = c("TERM","GOID","include","coefficient","Stim")))
library(stringr)
MELTED <- MELTED[!variable %like% "adj"]
MELTED[,"component" := (str_split_fixed(variable,"_",2))[,1]]
MELTED[,component := ifelse(component == "Z","combined",component)]
shalek_gsea_heatmap <-
ggplot(MELTED[variable %like% "Z"]) + aes(x = coefficient,y = TERM,fill =
sign(value) * pmin(15,abs(value))) + facet_wrap( ~component,nrow = 1) +
geom_raster() + theme_linedraw() + theme(
legend.position = "right",axis.text.x = element_text(angle = 90,hjust =
1),axis.text.y = element_text(size = 7)
) + scale_fill_gradient2(
"GSEA Z-score",low = ("#E9A3C9"),mid = ("#F7F7F7"),high = ("#A1D76A"),space =
"Lab",limits = c(-15,15)
) + scale_y_discrete("Module Name",limits = levs[o],labels = levs[o]) +
scale_x_discrete("Stimulation and Timepoint",labels = c("Time 2h","Time 4h", "Time 6h"))
##Run when using BTM modules
#pdf(file="../inst/extdata/output/SupplementaryFigure_Shalek_BTM_GSEA.pdf",width = 10,height=6)
#shalek_gsea_heatmap
#dev.off()
saveRDS(sets,file = "../inst/extdata/Shalek_Modules.rds")
sets_symbols=lapply(sets,function(s)pData(featureData(filtered_nobaseline))[s,"symbolid"])
saveRDS(sets_symbols,file="../inst/extdata/Shalek_Modules_symbol.rds")
rm(list=ls())
suppressPackageStartupMessages({
library(GGally)
library(grid)
library(ggplot2)
library(reshape2)
library(org.Hs.eg.db)
library(plyr)
library(glasso)
library(data.table)
library(GO.db)
library(hom.Hs.inp.db)
library(MAST)
library(Matrix)
library(igraph)
library(ggplot2)
library(RColorBrewer)
library(org.Mm.eg.db)
library(GSEABase)
library(corpcor)
library(Rtsne)
library(MASTDataPackage)
})
data(MASTDataPackage)
data_dir <- "data"
if(packageVersion("MAST")>="0.927"){
message("Version Okay")
}else{
stop("Wrong SingleCellAssay Version")
}
FCTHRESHOLD<-log2(1.5)
plotheme<-theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.line=element_line(colour="black"))
knitr::opts_chunk$set(list(echo=FALSE,eval=TRUE,message=FALSE,error=FALSE,warning=FALSE,fig.width=10,fig.height=8,dev=c("png")))
filtered<-sca_alex
percent_expressed<-0.1
thres<-"adapt"
tt <- thresholdSCRNACountMatrix(2^exprs(filtered) - 1, nbins = 20, min_per_bin = 30)
if (thres == "adapt") {
exprs(filtered) <- tt$counts_threshold
} else if (thres == "fixed") {
mat <- exprs(filtered)
mat[mat < 1/log(2)] <- 0
exprs(filtered) <- mat
}
expressed_genes <- colMeans(exprs(filtered) > 0) > percent_expressed
filtered <- filtered[, expressed_genes]
data <- exprs(filtered)
cd <- cData(filtered)
fd <- fData(filtered)
dt <- data.table(gene_id = fd$symbolid, t(data))
dt_long <- data.table(melt(dt))
load("../inst/extdata/clusters_shalek.rda")
CORE_ANTIVIRAL<-as.character(subset(clusters,CLUSTER=="Id")$GENE)
PEAKED_INFLAM<-as.character(subset(clusters,CLUSTER=="IIIc")$GENE)
SUSTAINED_INFLAM<-as.character(subset(clusters,CLUSTER=="IIId")$GENE)
ids=featureData(filtered)$primerid
ids.idx <- 1:length(ids)
#get all the GO IDS for all the genes
sym2go<-AnnotationDbi:::select(org.Mm.eg.db,keys=gsub("^(.)","\\U\\1",tolower(ids),perl=TRUE),columns="GOALL",keytype="SYMBOL")
sym2go <- na.omit(sym2go)
sym2go <- data.table(sym2go)
ids <- data.table(cbind(ids,ids.idx))
setkey(ids,ids)
sym2go=sym2go[,ids:=SYMBOL]
setkey(sym2go,ids)
sym2go <- merge(ids,sym2go)
#module_member is the gene index for the given module
BP <- sym2go[ONTOLOGYALL%in%"BP"]
BP <- BP[,module_member:=ids.idx,list(GOALL)]
filtered<-sca_alex
percent_expressed<-0.1
thres<-"adapt"
tt <- thresholdSCRNACountMatrix(2^exprs(filtered) - 1, nbins = 20, min_per_bin = 30)
if (thres == "adapt") {
exprs(filtered) <- tt$counts_threshold
} else if (thres == "fixed") {
mat <- exprs(filtered)
mat[mat < 1/log(2)] <- 0
exprs(filtered) <- mat
}
expressed_genes <- colMeans(exprs(filtered) > 0) > percent_expressed
filtered <- filtered[, expressed_genes]
data <- exprs(filtered)
cd <- cData(filtered)
fd <- fData(filtered)
dt <- data.table(gene_id = fd$symbolid, t(data))
dt_long <- data.table(melt(dt))
load("../inst/extdata/clusters_shalek.rda")
CORE_ANTIVIRAL<-as.character(subset(clusters,CLUSTER=="Id")$GENE)
PEAKED_INFLAM<-as.character(subset(clusters,CLUSTER=="IIIc")$GENE)
SUSTAINED_INFLAM<-as.character(subset(clusters,CLUSTER=="IIId")$GENE)
ids=featureData(filtered)$primerid
ids.idx <- 1:length(ids)
#get all the GO IDS for all the genes
sym2go<-AnnotationDbi:::select(org.Mm.eg.db,keys=gsub("^(.)","\\U\\1",tolower(ids),perl=TRUE),columns="GOALL",keytype="SYMBOL")
sym2go <- na.omit(sym2go)
sym2go <- data.table(sym2go)
ids <- data.table(cbind(ids,ids.idx))
setkey(ids,ids)
sym2go=sym2go[,ids:=SYMBOL]
setkey(sym2go,ids)
sym2go <- merge(ids,sym2go)
#module_member is the gene index for the given module
BP <- sym2go[ONTOLOGYALL%in%"BP"]
BP <- BP[,module_member:=ids.idx,list(GOALL)]
cData(filtered)$Stim <- factor(cData(filtered)$Stim,levels=c("Unstimulated","LPS","PAM","PIC"))
cData(filtered)$Time <- factor(cData(filtered)$Time)
filtered_nobaseline <- subset(filtered,!Stim%in%c("Unstimulated")) #drop Time 0
cData(filtered_nobaseline)$Stim <- factor(cData(filtered_nobaseline)$Stim)
cData(filtered_nobaseline)$Time <- factor(cData(filtered_nobaseline)$Time)
options(mc.cores=8)
fit.bystim <- zlm.SingleCellAssay(~cngeneson+Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE,hook=deviance_residuals_hook,lambda=0.1)
fit<-fit.bystim
options(mc.cores=7)
#Fit a model without ngeneson for comparison
fit.bystim.nongeneson <- zlm.SingleCellAssay(~Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE,hook=deviance_residuals_hook,lambda=0.1)
#Test for any time effect
M <- matrix(0,nrow=ncol(coef(fit,"D")))
rownames(M) <- colnames(coef(fit,"D"))
M[colnames(coef(fit,"D"))%like%"LPS",] <- 1
M.time <- M
M.time['(Intercept)',]<- 0
anyTime <- lrTest(fit, hypothesis=M.time)
anyTime.sorted <- na.omit(anyTime[order(anyTime[,'hurdle','Pr(>Chisq)']),'hurdle',])
lfc.anytime<-getLogFC(fit)[contrast%like%"Time"]
res_gene_hurdle<-data.table(dcast(melt(anyTime.sorted),primerid~metric))
res_gene_hurdle=res_gene_hurdle[,adj:=p.adjust(`Pr(>Chisq)`,"fdr")]
#test with no ngeneson
nong.test<-lrTest(fit.bystim.nongeneson, hypothesis=M.time[-2,,drop=FALSE])
nong.test <- na.omit(nong.test[order(nong.test[,'hurdle','Pr(>Chisq)']),'hurdle',])
nong.test<-data.table(dcast(melt(nong.test),primerid~metric))
nong.test=nong.test[,adj:=p.adjust(`Pr(>Chisq)`,"fdr")]
tg<-merge(lfc.anytime[contrast%like%"LPS"&contrast%like%"Time6h"],res_gene_hurdle,by="primerid")[order((logFC),adj)][1:100,primerid]
COMPASS::pheatmap(exprs(filtered_nobaseline[cData(filtered_nobaseline)$Time%in%c("1h","6h")&cData(filtered_nobaseline)$Stim%in%"LPS",as.character(tg)]))
### Test for any stimulation effect
#Test for any Stim effect
M <- matrix(0,nrow=ncol(coef(fit,"D")))
rownames(M) <- colnames(coef(fit,"D"))
M[colnames(coef(fit,"D"))%like%"Stim",] <- 1
M.stim <- M
anyStim <- lrTest(fit, hypothesis=M.stim)
anyStim.sorted <- na.omit(anyStim[order(anyStim[,'hurdle','Pr(>Chisq)']),'hurdle',])
library(data.table)
library(limma)
library(GO.db)
gene_association= fread("../inst/extdata/gene_association.mgi",skip=6)
geneset_id      = split(toupper(gene_association$V3), gene_association$V5)
geneset_terms   = Term(GOTERM)[names(geneset_id)]
geneset_index   = ids2indices(geneset_id, fData(filtered_nobaseline)$symbolid)
#GSEA
options(mc.cores=7)
cache(boot_shalek <- bootVcov1(zlmfit=fit,R=100))
sets<-list()
sets[["CORE_ANTIVIRAL"]] <- CORE_ANTIVIRAL
sets[["CORE_ANTIVIRAL"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["CORE_ANTIVIRAL"]])
sets[["PEAKED_INFLAM"]] <- PEAKED_INFLAM
sets[["PEAKED_INFLAM"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["PEAKED_INFLAM"]])
sets[["SUSTAINED_INFLAM"]] <- SUSTAINED_INFLAM
sets[["SUSTAINED_INFLAM"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["SUSTAINED_INFLAM"]])
#Load the blood transcriptional modules
load("../inst/extdata/emory_blood_transcript_modules.rda")
gene_names <- rownames(coef(fit,"D"))
for(i in seq_along(emory_blood_transcript_modules)){
sets[[names(emory_blood_transcript_modules)[i]]] <- which(gene_names%in%emory_blood_transcript_modules[[i]])
}
sets<-c(sets,geneset_index)
colnames(coef(fit,"D"))
hyp <- lapply(colnames(coef(fit,"D"))[colnames(coef(fit,"D"))%like%"Time"],function(x)CoefficientHypothesis(x))
sets<-sets[names(which(unlist(lapply(sets,length))>5))] #at least 5 genes
cache(gsea.time <- lapply(hyp,function(x)gseaAfterBoot(fit,boot_shalek,sets,hypothesis=x,control = list(n_randomize = Inf,var_estimate = "bootall"))))
summarizeGSEA <- function(gsea){
stats <- calcZ(gsea,testType="normal",combined="stouffer")
stats2 <- calcZ(gsea,testType="t")
stats <- reshape2::melt(stats)
stats2<-reshape2::melt(stats2)
stats <- setnames(stats,c("module","variable","value"))
stats <- dcast(stats,module~variable)
stats2<-dcast(stats2,set~comp+metric)
setnames(stats2,"set","module")
stats<-merge(stats,stats2,by="module")
return(stats)
}
#' Combine into one table
toplot <- lapply(gsea.time,summarizeGSEA)
names(toplot)<-colnames(coef(fit,"D"))[colnames(coef(fit,"D"))%like%"Time"]
toplot<-data.table(ldply(toplot))
setnames(toplot,".id","coefficient")
#GO
toplot=toplot[module%like%"GO:"|module%in%c("CORE_ANTIVIRAL","PEAKED_INFLAM","SUSTAINED_INFLAM")]
#BTM
#toplot=toplot[!module%like%"GO:"&!module%in%c("CORE_ANTIVIRAL","PEAKED_INFLAM","SUSTAINED_INFLAM")]
toplot = toplot[,adjp := p.adjust(P,"fdr"),]
toplot=toplot[module%in%c(unique(unlist(lapply(gsea.time,function(x)unique(c(names(which(abs(x[,"disc","stat","test"]-x[,"disc","stat","null"])>1)),names(which(abs(x[,"cont","stat","test"]-x[,"cont","stat","null"])>log2(1.5)))))  ))),"SUSTAINED_INFLAM","CORE_ANTIVIRAL","PEAKED_INFLAM")]
#Map go ids to descriptions
ids <- as.character(unique(toplot[,module]))
GOID_terms <- select(GO.db,keys = ids,columns = "TERM",keytype = "GOID")
#Merge with gsea results based on GOID
GOID_terms <- data.table(GOID_terms)
setkey(GOID_terms,GOID)
setnames(toplot,"module","GOID")
setkey(toplot,GOID)
toplot <- merge(toplot,GOID_terms)
toplot = toplot[,TERM := ifelse(is.na(TERM),GOID,TERM)]
toplot = toplot[,Stim := factor(gsub(":.+","",coefficient))]
#toplot = toplot[,adjp := p.adjust(P,"fdr"),]
toplot = toplot <- na.omit(toplot)
toplot = toplot[,include := any(adjp < 1e-20),list(TERM)]
#BTM
#toplot <- toplot[!TERM %like% "TBA"&!GOID%like%"GO"&!GOID%in%c("SUSTAINED_INFLAM","PEAKED_INFLAM","CORE_ANTIVIRAL")]
toplot <- toplot[!TERM %like% "TBA"]
o <- order(toplot[include == TRUE,sum((Z))/sqrt(length(Z)),TERM]$V1)
levs <- toplot[include == TRUE,TERM,TERM]$TERM
toplot = toplot[,coefficient := factor(toplot$coefficient)]
MELTED <- data.table(melt(toplot[coefficient  %like% "LPS" & include == TRUE],id = c("TERM","GOID","include","coefficient","Stim")))
library(stringr)
MELTED <- MELTED[!variable %like% "adj"]
MELTED[,"component" := (str_split_fixed(variable,"_",2))[,1]]
MELTED[,component := ifelse(component == "Z","combined",component)]
shalek_gsea_heatmap <-
ggplot(MELTED[variable %like% "Z"]) + aes(x = coefficient,y = TERM,fill =
sign(value) * pmin(15,abs(value))) + facet_wrap( ~component,nrow = 1) +
geom_raster() + theme_linedraw() + theme(
legend.position = "right",axis.text.x = element_text(angle = 90,hjust =
1),axis.text.y = element_text(size = 7)
) + scale_fill_gradient2(
"GSEA Z-score",low = ("#E9A3C9"),mid = ("#F7F7F7"),high = ("#A1D76A"),space =
"Lab",limits = c(-15,15)
) + scale_y_discrete("Module Name",limits = levs[o],labels = levs[o]) +
scale_x_discrete("Stimulation and Timepoint",labels = c("Time 2h","Time 4h", "Time 6h"))
##Run when using BTM modules
#pdf(file="../inst/extdata/output/SupplementaryFigure_Shalek_BTM_GSEA.pdf",width = 10,height=6)
#shalek_gsea_heatmap
#dev.off()
saveRDS(sets,file = "../inst/extdata/Shalek_Modules.rds")
sets_symbols=lapply(sets,function(s)pData(featureData(filtered_nobaseline))[s,"symbolid"])
saveRDS(sets_symbols,file="../inst/extdata/Shalek_Modules_symbol.rds")
MELTED
MELTED[variable%like%"Z"]
MELTED[variable%like%"Z"]
MELTED[variable%like%"Z",component%in%"combined"]
MELTED[variable%like%"Z"&component%in%"combined"]
MELTED[variable%like%"Z"&component%in%"combined"][order(abs(value))]
MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))]
MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][1:50]
MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][1:50,GOID]
shalek_gsea_heatmap <-
ggplot(MELTED[variable %like% "Z"&GOID%in%(MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][1:50,GOID])]) + aes(x = coefficient,y = TERM,fill =
sign(value) * pmin(15,abs(value))) + facet_wrap( ~component,nrow = 1) +
geom_raster() + theme_linedraw() + theme(
legend.position = "right",axis.text.x = element_text(angle = 90,hjust =
1),axis.text.y = element_text(size = 7)
) + scale_fill_gradient2(
"GSEA Z-score",low = ("#E9A3C9"),mid = ("#F7F7F7"),high = ("#A1D76A"),space =
"Lab",limits = c(-15,15)
) + scale_y_discrete("Module Name",limits = levs[o],labels = levs[o]) +
scale_x_discrete("Stimulation and Timepoint",labels = c("Time 2h","Time 4h", "Time 6h"))
shalek_gsea_heatmap
levs<-MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][1:50,GOID]
shalek_gsea_heatmap <-
ggplot(MELTED[variable %like% "Z"&GOID%in%(MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][1:50,GOID])]) + aes(x = coefficient,y = TERM,fill =
sign(value) * pmin(15,abs(value))) + facet_wrap( ~component,nrow = 1) +
geom_raster() + theme_linedraw() + theme(
legend.position = "right",axis.text.x = element_text(angle = 90,hjust =
1),axis.text.y = element_text(size = 7)
) + scale_fill_gradient2(
"GSEA Z-score",low = ("#E9A3C9"),mid = ("#F7F7F7"),high = ("#A1D76A"),space =
"Lab",limits = c(-15,15)
) + scale_y_discrete("Module Name",limits = levs[o],labels = levs[o]) +
scale_x_discrete("Stimulation and Timepoint",labels = c("Time 2h","Time 4h", "Time 6h"))
shalek_gsea_heatmap
levs<-MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][1:50,TERM]
shalek_gsea_heatmap <-
ggplot(MELTED[variable %like% "Z"&GOID%in%(MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][1:50,GOID])]) + aes(x = coefficient,y = TERM,fill =
sign(value) * pmin(15,abs(value))) + facet_wrap( ~component,nrow = 1) +
geom_raster() + theme_linedraw() + theme(
legend.position = "right",axis.text.x = element_text(angle = 90,hjust =
1),axis.text.y = element_text(size = 7)
) + scale_fill_gradient2(
"GSEA Z-score",low = ("#E9A3C9"),mid = ("#F7F7F7"),high = ("#A1D76A"),space =
"Lab",limits = c(-15,15)
) + scale_y_discrete("Module Name",limits = levs[o],labels = levs[o]) +
scale_x_discrete("Stimulation and Timepoint",labels = c("Time 2h","Time 4h", "Time 6h"))
shalek_gsea_heatmap
toplot[include == TRUE,sum((Z))/sqrt(length(Z)),TERM]$V1
levs
shalek_gsea_heatmap <-
ggplot(MELTED[variable %like% "Z"&GOID%in%(MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][1:50,GOID])]) + aes(x = coefficient,y = TERM,fill =
sign(value) * pmin(15,abs(value))) + facet_wrap( ~component,nrow = 1) +
geom_raster() + theme_linedraw() + theme(
legend.position = "right",axis.text.x = element_text(angle = 90,hjust =
1),axis.text.y = element_text(size = 7)
) + scale_fill_gradient2(
"GSEA Z-score",low = ("#E9A3C9"),mid = ("#F7F7F7"),high = ("#A1D76A"),space =
"Lab",limits = c(-15,15)
) + scale_y_discrete("Module Name",limits = levs,labels = levs) +
scale_x_discrete("Stimulation and Timepoint",labels = c("Time 2h","Time 4h", "Time 6h"))
shalek_gsea_heatmap
levs
MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][1:50,TERM]
MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][,unique(TERM)][1:50]
levs<-MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][,unique(TERM)][1:50]
shalek_gsea_heatmap <-
ggplot(MELTED[variable %like% "Z"&GOID%in%(MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][,unique(GOID)][1:50])]) + aes(x = coefficient,y = TERM,fill =
sign(value) * pmin(15,abs(value))) + facet_wrap( ~component,nrow = 1) +
geom_raster() + theme_linedraw() + theme(
legend.position = "right",axis.text.x = element_text(angle = 90,hjust =
1),axis.text.y = element_text(size = 7)
) + scale_fill_gradient2(
"GSEA Z-score",low = ("#E9A3C9"),mid = ("#F7F7F7"),high = ("#A1D76A"),space =
"Lab",limits = c(-15,15)
) + scale_y_discrete("Module Name",limits = levs,labels = levs) +
scale_x_discrete("Stimulation and Timepoint",labels = c("Time 2h","Time 4h", "Time 6h"))
shalek_gsea_heatmap
shalek_gsea_heatmap <-
ggplot(MELTED[variable %like% "Z"&GOID%in%(MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][,unique(GOID)][1:50])]) + aes(x = coefficient,y = TERM,fill =
sign(value) * pmin(15,abs(value))) + facet_wrap( ~component,nrow = 1) +
geom_raster() + theme_linedraw() + theme(
legend.position = "right",axis.text.x = element_text(angle = 90,hjust =
1),axis.text.y = element_text(size = 7)
) + scale_fill_gradient2(
"GSEA Z-score",low = ("#E9A3C9"),mid = ("#F7F7F7"),high = ("#A1D76A"),space =
"Lab",limits = c(-20,20)
) + scale_y_discrete("Module Name",limits = levs,labels = levs) +
scale_x_discrete("Stimulation and Timepoint",labels = c("Time 2h","Time 4h", "Time 6h"))
shalek_gsea_heatmap
shalek_gsea_heatmap <-
ggplot(MELTED[variable %like% "Z"&GOID%in%(MELTED[variable%like%"Z"&component%in%"combined"][order(-abs(value))][,unique(GOID)][1:50])]) + aes(x = coefficient,y = TERM,fill =
sign(value) * pmin(15,abs(value))) + facet_wrap( ~component,nrow = 1) +
geom_raster() + theme_linedraw() + theme(
legend.position = "right",axis.text.x = element_text(angle = 90,hjust =
1),axis.text.y = element_text(size = 7)
) + scale_fill_gradient2(
"GSEA Z-score",low = ("#E9A3C9"),mid = ("#F7F7F7"),high = ("#A1D76A"),space =
"Lab",limits = c(-20,20)
) + scale_y_discrete("Module Name",limits = rev(levs),labels = rev(levs)) +
scale_x_discrete("Stimulation and Timepoint",labels = c("Time 2h","Time 4h", "Time 6h"))
shalek_gsea_heatmap
devtools::build_vignettes(".")
