library("MASTDataPackage")
library("MAST")
library("GSEABase")
library("limma")
library(grid)
library("reshape2")
library(RColorBrewer)
library("data.table")
library("knitr")
library(psych)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
library(flowClust)
library(COMPASS)
library(scales)
library(grid)
library(stringr)
library(gridExtra)
library(class)
options(mc.cores = detectCores() - 1) #or set smaller if you find yourself running out of memory
})
LARGE_MEMORY_CORES <- 7 #for large memory operations
knitr::opts_chunk$set(list(
echo = FALSE,eval = TRUE,message = FALSE,error = FALSE,warning = FALSE,cache = TRUE,fig.width=10,fig.height=8))
plotheme <-
theme(
plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.line =
element_line(colour = "black")
)
opts_chunk$set(tidy=TRUE, cache=TRUE, messages=TRUE)
data(MASTDataPackage)
sca <- sca_mait
thres <- "adapt"
percent_expressed <- 0.2
FCTHRESHOLD <- log2(1.5)
sca <- subset(sca,nGeneOn > 4000)
eid <-
select(TxDb.Hsapiens.UCSC.hg19.knownGene,keys = fData(sca_mait)$entrez,keytype ="GENEID",columns = c("GENEID","TXNAME"))
ueid <- unique(na.omit(eid)$GENEID)
sca <- sca[,fData(sca)$entrez %in% ueid]
set.seed(123)
module <- "BTM"
min_gene_in_module <- 5
# thresholding
layer(sca)<-"tpm"
tt <- thresholdSCRNACountMatrix(2^exprs(sca) - 1, nbins = 20, min_per_bin = 30)
if (thres == "adapt") {
exprs(sca) <- tt$counts_threshold
} else if (thres == "fixed") {
mat <- exprs(sca)
mat[mat < 1/log(2)] <- 0
exprs(sca) <- mat
}
expressed_genes <- colMeans(exprs(sca) > 0) > percent_expressed
sca <- sca[, expressed_genes]
data <- exprs(sca)
cd <- cData(sca)
fd <- fData(sca)
## Data in long format for visualization
dt <- data.table(gene_id = fd$symbolid, t(data))
dt_long <- data.table(melt(dt))
dt_long[, `:=`(condition, ifelse(grepl("-Stim", variable), "Stim", "Unstim"))]
options(mc.cores=LARGE_MEMORY_CORES)
# ZLM (ridge regression for continuous, get standardized deviance residuals)
cond<-factor(cData(sca)$condition)
cond<-relevel(cond,"Unstim")
cData(sca)$condition<-cond
zlm <- zlm.SingleCellAssay(~condition + cngeneson, sca, method = "bayesglm",
ebayes = TRUE, ebayesControl = list(method = "MLE", model = "H1"))
zlm.nongeneson <- zlm.SingleCellAssay(~condition , sca, method = "bayesglm",
ebayes = TRUE, ebayesControl = list(method = "MLE", model = "H1"), hook = deviance_residuals_hook)
zlm.notrt <- zlm.SingleCellAssay(~cngeneson , sca, method = "bayesglm",
ebayes = TRUE, ebayesControl = list(method = "MLE", model = "H1"))
zlm.null <- zlm.SingleCellAssay(~1 , sca, method = "bayesglm",
ebayes = TRUE, ebayesControl = list(method = "MLE", model = "H1"))
# LRT
lrt <- lrTest(zlm, "condition")
lrt.nongeneson<-lrTest(zlm.nongeneson,"condition")
# Still need to merge on logFC
res_gene <- data.table(melt(lrt))
res_gene[,primerid:=gsub("\\.\\d+","",primerid)]
res_gene <- merge(res_gene, fd, by="primerid")
res_gene_hurdle <- res_gene[metric=="Pr(>Chisq)" & test.type=="hurdle"]
res_gene_hurdle[,adj:=p.adjust(value,"fdr")]
lfc<-getLogFC(zlm)[contrast=="conditionStim"]
setkey(lfc,primerid)
setkey(res_gene_hurdle,primerid)
res_gene_hurdle<-merge(lfc,res_gene_hurdle)
# merge on logFC
res_gene_nong <- data.table(melt(lrt.nongeneson))
res_gene_nong[,primerid:=gsub("\\.\\d+","",primerid)]
res_gene_nong <- merge(res_gene_nong, fd, by="primerid")
res_gene_hurdle_nong <- res_gene_nong[metric=="Pr(>Chisq)" & test.type=="hurdle"]
res_gene_hurdle_nong[,adj:=p.adjust(value,"fdr")]
lfc_nong<-getLogFC(zlm.nongeneson)[contrast=="conditionStim"]
setkey(lfc_nong,primerid)
setkey(res_gene_hurdle_nong,primerid)
res_gene_hurdle_nong<-merge(lfc_nong,res_gene_hurdle_nong)
nrow(res_gene_hurdle_nong[adj<0.01])
nrow(res_gene_hurdle[adj<0.01])
### Surrogate Variable Analysis
library(sva)
library(RUVSeq)
layer(sca)<-"count"
E = (2^exprs(sca))-1
layer(sca)<-"tpm"
ng = rowMeans(E>0)
svafit = svaseq(t(exprs(sca)),mod = model.matrix(~condition,cData(sca)),n.sv = 2)
boxplot(sv~Stim,data.frame(sv=svafit$sv[,2],Stim = cData(sca)$condition))
### RUVSeq
ruvres = RUVs(x = t(exprs(sca)), cIdx = rep(TRUE,5306), k = 2, scIdx = matrix(c(1:37,38:73,-1),nrow=2,byrow=TRUE),isLog = TRUE)
pdf(file="../inst/extdata/RUVSVAMAIT.pdf",width=8,height=2.5)
par(mfrow=c(1,4))
plot(svafit$sv[,1],cData(sca)$cngeneson,xlab="SV1",ylab="CDR",col=cData(sca)$condition,pch=20)
text(y=-0.15,x=0.1,labels = substitute(R == rho,list(rho=signif(cor(svafit$sv[,1],cData(sca)$cngeneson),3))))
plot(svafit$sv[,2],cData(sca)$cngeneson,xlab="SV2",ylab="CDR",col=cData(sca)$condition,pch=20)
text(y=-0.15,x=0.1,labels = substitute(R == rho,list(rho=signif(cor(svafit$sv[,2],cData(sca)$cngeneson),3))))
plot(ruvres$W[,1],cData(sca)$cngeneson,col=cData(sca)$condition,xlab="RUV1",ylab="CDR",pch=20)
text(y=-0.15,x=0.4,labels = substitute(R == rho,list(rho=signif(cor(ruvres$W[,1],cData(sca)$cngeneson),3))))
plot(ruvres$W[,2],cData(sca)$cngeneson,col=cData(sca)$condition,xlab="RUV2",ylab="CDR",pch=20)
text(y=-0.15,x=-0.48,labels = substitute(R == rho,list(rho=signif(cor(ruvres$W[,2],cData(sca)$cngeneson),3))))
dev.off()
###
### Surrogate Variable Analysis
library(sva)
library(RUVSeq)
layer(sca)<-"count"
E = (2^exprs(sca))-1
layer(sca)<-"tpm"
ng = rowMeans(E>0)
svafit = svaseq(t(exprs(sca)),mod = model.matrix(~condition,cData(sca)),n.sv = 2)
boxplot(sv~Stim,data.frame(sv=svafit$sv[,2],Stim = cData(sca)$condition))
### RUVSeq
ruvres = RUVs(x = t(exprs(sca)), cIdx = rep(TRUE,5306), k = 2, scIdx = matrix(c(1:37,38:73,-1),nrow=2,byrow=TRUE),isLog = TRUE)
pdf(file="../inst/extdata/RUVSVAMAIT.pdf",width=8,height=2.5)
par(mfrow=c(1,4))
plot(svafit$sv[,1],cData(sca)$cngeneson,xlab="SV1",ylab="CDR",col=cData(sca)$condition,pch=20)
text(y=-0.15,x=0.1,labels = substitute(R == rho,list(rho=signif(cor(svafit$sv[,1],cData(sca)$cngeneson),3))))
plot(svafit$sv[,2],cData(sca)$cngeneson,xlab="SV2",ylab="CDR",col=cData(sca)$condition,pch=20)
text(y=-0.15,x=0.1,labels = substitute(R == rho,list(rho=signif(cor(svafit$sv[,2],cData(sca)$cngeneson),3))))
plot(ruvres$W[,1],cData(sca)$cngeneson,col=cData(sca)$condition,xlab="RUV1",ylab="CDR",pch=20)
text(y=-0.15,x=0.4,labels = substitute(R == rho,list(rho=signif(cor(ruvres$W[,1],cData(sca)$cngeneson),3))))
plot(ruvres$W[,2],cData(sca)$cngeneson,col=cData(sca)$condition,xlab="RUV2",ylab="CDR",pch=20)
text(y=-0.15,x=-0.48,labels = substitute(R == rho,list(rho=signif(cor(ruvres$W[,2],cData(sca)$cngeneson),3))))
dev.off()
###
library(data.table)
library(plyr)
library(GO.db)
library(stringr)
library(ggplot2)
library(mHG)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
#diffex = readRDS("../inst/extdata/method_comp_logfc_qvalue.rds")
diffex = readRDS("../inst/extdata/comb_fdr_logfc.rds")
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
goterms = select(org.Hs.eg.db,diffex[,primerid],"GO","ENTREZID")
setDT(goterms)
goterms = goterms[ONTOLOGY%in%"BP"]
#only experimental evidence
goterms = goterms[EVIDENCE%in%c("EXP","IDA","IPI","IMP","IGI","IEP")]
unique.go = goterms[,unique(ENTREZID),.(GO)]
terms = select(GO.db,columns = c("GOID","TERM"),unique(goterms$GO))
setnames(unique.go,"GO","GOID")
setnames(unique.go,"V1","ENTREZID")
setDT(terms)
terms = unique(terms)
unique.go = unique(unique.go)
unique.go = merge(unique.go,terms,by="GOID")
unique.go[,N:=length(ENTREZID),.(GOID)]
offspring = GOBPOFFSPRING[["GO:0002376"]]
setnames(diffex,"primerid","ENTREZID")
thresholds = c(0.01,0.05,0.1)
prob_thresh=0.01
NN = length(unique(unique.go$ENTREZID))
methods = c("zlm_fdr","zlm_ng_fdr","zlm_fix_fdr","zlm_fix_ng_fdr","limma_fdr","limma_fdr","limma_ng_fdr","deseq_fdr","deseq_ng_fdr","edger_fdr","edger_ng_fdr","scde_fdr")
loops = expand.grid(thresholds,methods)
thresh=0.05
meth="zlm_ng_fdr"
results = apply(loops,1,function(looprow){
thresh = looprow[1]
meth = as.character(looprow[2])
fc = gsub("fdr","log2fc",meth)
res = unique.go[ENTREZID%in%diffex[get(meth)<thresh&abs(get(fc))>log2(1.25),ENTREZID]][,.(prob = 1-phyper(q=length(ENTREZID),m = N, n = NN-N,k = length(diffex[get(meth)<thresh,ENTREZID])),TERM,N,hit = length(ENTREZID)),.(GOID)]
nr.imm = length(unique(res)[GOID%in%offspring&p.adjust(prob,"fdr")<prob_thresh,GOID])
nr.tot = length(unique(res)[p.adjust(prob,"fdr")<prob_thresh,GOID])
data.frame(thresh,meth,nr.imm,nr.tot,nr.imm/nr.tot)
})
results_r = ldply(results)
setDT(results_r)
results_r[,meth:=gsub("zlm_fix","zlmfix",meth)]
results_r[,rate := nr.imm/nr.tot]
results_r[,thresh:=as.numeric(as.character(thresh))]
results_r[,method_global := str_split_fixed(meth,"_",3)[,1]]
results_r[,withng := factor(str_split_fixed(meth,"_",3)[,2],labels=c("No CDR control","CDR control"))]
p1 = ggplot(results_r[!method_global%like%"fix"])+aes(x=thresh,y=rate,color=method_global)+geom_point()+geom_line()+scale_x_continuous("FDR Threshold")+scale_y_continuous("Proportion of Immune\nSpecific GO Modules")+facet_wrap(~withng)+scale_color_brewer("Method",palette = 2,type="qual",limits=c("limma","zlm","zlmfix","deseq","edger","scde"),labels=c("Limma","MAST","MAST (fixed threshold)","DESeq","EdgeR","SCDE"))+theme_gray()
leg = g_legend(p1)
diffex.mdc = readRDS("../inst/extdata/method_comp_logfc_qvalue_mDC.rds")
setnames(diffex.mdc,"primerid","SYMBOL")
diffex.mdc$SYMBOL=gsub("^(.)","\\U\\1",tolower(diffex.mdc$SYMBOL),perl=TRUE)
goterms = select(org.Mm.eg.db,diffex.mdc[,SYMBOL],"GO","SYMBOL")
setDT(goterms)
goterms = goterms[ONTOLOGY%in%"BP"]
#only experimental evidence
goterms = goterms[EVIDENCE%in%c("EXP","IDA","IPI","IMP","IGI","IEP")]
unique.go = goterms[,unique(SYMBOL),.(GO)]
terms = select(GO.db,columns = c("GOID","TERM"),goterms$GO)
setnames(unique.go,"GO","GOID")
setnames(unique.go,"V1","SYMBOL")
setDT(terms)
terms = unique(terms)
unique.go = unique(unique.go)
unique.go = merge(unique.go,terms,by="GOID")
unique.go[,N:=length(SYMBOL),.(GOID)]
NN=length(unique(unique.go[,SYMBOL]))
p1
results_r
p1 = ggplot(results_r)+aes(x=thresh,y=rate,color=method_global)+geom_point()+geom_line()+scale_x_continuous("FDR Threshold")+scale_y_continuous("Proportion of Immune\nSpecific GO Modules")+facet_wrap(~withng)+scale_color_brewer("Method",palette = 2,type="qual",limits=c("limma","zlm","zlmfix","deseq","edger","scde"),labels=c("Limma","MAST","MAST (fixed threshold)","DESeq","EdgeR","SCDE"))+theme_gray()
leg = g_legend(p1)
p1
p1
results_r
p1 = ggplot(results_r[c(method_global%in%"zlmfix")])+aes(x=thresh,y=rate,color=method_global)+geom_point()+geom_line()+scale_x_continuous("FDR Threshold")+scale_y_continuous("Proportion of Immune\nSpecific GO Modules")+facet_wrap(~withng)+scale_color_brewer("Method",palette = 2,type="qual",limits=c("limma","zlm","deseq","edger","scde"),labels=c("Limma","MAST","DESeq","EdgeR","SCDE"))+theme_gray()
leg = g_legend(p1)
p1
p1 = ggplot(results_r[!(method_global%in%"zlmfix")])+aes(x=thresh,y=rate,color=method_global)+geom_point()+geom_line()+scale_x_continuous("FDR Threshold")+scale_y_continuous("Proportion of Immune\nSpecific GO Modules")+facet_wrap(~withng)+scale_color_brewer("Method",palette = 2,type="qual",limits=c("limma","zlm","deseq","edger","scde"),labels=c("Limma","MAST","DESeq","EdgeR","SCDE"))+theme_gray()
leg = g_legend(p1)
p1
pdf(file="../inst/extdata/output/SuppFig_10_a.pdf",width=6,height=4)
grid.draw(p1)
dev.off()
mait_go = readRDS("../inst/extdata/gsea_result.rds")
colnames(mait_go)
mait_go[,c("FDR_zlm_ng","FDR_zlmf_fix_ng")]
mait_go[,.(FDR_zlm_ng,FDR_zlmf_fix_ng)]
mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)]
plot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])
ggplot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])+aes(x=FDR_zlm_fix_ng,y=FDR_zlm_ng)+geom_point()
ggplot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])+aes(x=-log10(FDR_zlm_fix_ng),y=-log10(FDR_zlm_ng))+geom_point()
ggplot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])+aes(x=-log10(FDR_zlm_fix_ng),y=-log10(FDR_zlm_ng))+geom_point()+abline(v=2)
ggplot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])+aes(x=-log10(FDR_zlm_fix_ng),y=-log10(FDR_zlm_ng))+geom_point()+abline(y=2)
ggplot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])+aes(x=-log10(FDR_zlm_fix_ng),y=-log10(FDR_zlm_ng))+geom_point()+vline(x=2)
ggplot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])+aes(x=-log10(FDR_zlm_fix_ng),y=-log10(FDR_zlm_ng))+geom_point()+geom_vline(x=2)
ggplot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])+aes(x=-log10(FDR_zlm_fix_ng),y=-log10(FDR_zlm_ng))+geom_point()+geom_vline(x=-log10(0.01))+geom_hline(y=-log10(0.01))
ggplot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])+aes(x=-log10(FDR_zlm_fix_ng),y=-log10(FDR_zlm_ng))+geom_point()+geom_vline(x=-log10(0.01))+geom_hline(y=-log10(0.01))+scale_y_continuous("GSEA -log10(q): MAST with Adaptive Thresholding")+scale_x_continuous("GSEA -log10(q): MAST with Fixed Thresholding")
ggplot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])+aes(x=-log10(FDR_zlm_fix_ng),y=-log10(FDR_zlm_ng))+geom_point()+geom_vline(x=-log10(0.01))+geom_hline(y=-log10(0.01))+scale_y_continuous("GSEA -log10(q): MAST with Adaptive Thresholding")+scale_x_continuous("GSEA -log10(q): MAST with Fixed Thresholding")+theme_linedraw()
ggplot(mait_go[,.(FDR_zlm_ng,FDR_zlm_fix_ng)])+aes(x=-log10(FDR_zlm_fix_ng),y=-log10(FDR_zlm_ng))+geom_point()+geom_vline(x=-log10(0.01))+geom_hline(y=-log10(0.01))+scale_y_continuous("GSEA -log10(q): MAST with\nAdaptive Thresholding")+scale_x_continuous("GSEA -log10(q): MAST with\nFixed Thresholding")+theme_linedraw()
mait_go
head(mait_go)
colnames(mait_go)
ggplot(mait_go[,.(P_zlm_ng,P_zlm_fix_ng)])+aes(x=-log10(P_zlm_fix_ng),y=-log10(P_zlm_ng))+geom_point()+geom_vline(x=-log10(0.01))+geom_hline(y=-log10(0.01))+scale_y_continuous("GSEA -log10(p): MAST with\nAdaptive Thresholding")+scale_x_continuous("GSEA -log10(p): MAST with\nFixed Thresholding")+theme_linedraw()
a/b
library(data.table)
library(plyr)
library(GO.db)
library(stringr)
library(grid)
library(ggplot2)
library(mHG)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
#diffex = readRDS("../inst/extdata/method_comp_logfc_qvalue.rds")
diffex = readRDS("../inst/extdata/comb_fdr_logfc.rds")
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
goterms = select(org.Hs.eg.db,diffex[,primerid],"GO","ENTREZID")
setDT(goterms)
goterms = goterms[ONTOLOGY%in%"BP"]
#only experimental evidence
goterms = goterms[EVIDENCE%in%c("EXP","IDA","IPI","IMP","IGI","IEP")]
unique.go = goterms[,unique(ENTREZID),.(GO)]
terms = select(GO.db,columns = c("GOID","TERM"),unique(goterms$GO))
setnames(unique.go,"GO","GOID")
setnames(unique.go,"V1","ENTREZID")
setDT(terms)
terms = unique(terms)
unique.go = unique(unique.go)
unique.go = merge(unique.go,terms,by="GOID")
unique.go[,N:=length(ENTREZID),.(GOID)]
offspring = GOBPOFFSPRING[["GO:0002376"]]
setnames(diffex,"primerid","ENTREZID")
thresholds = c(0.01,0.05,0.1)
prob_thresh=0.01
NN = length(unique(unique.go$ENTREZID))
methods = c("zlm_fdr","zlm_ng_fdr","zlm_fix_fdr","zlm_fix_ng_fdr","limma_fdr","limma_fdr","limma_ng_fdr","deseq_fdr","deseq_ng_fdr","edger_fdr","edger_ng_fdr","scde_fdr")
loops = expand.grid(thresholds,methods)
thresh=0.05
meth="zlm_ng_fdr"
results = apply(loops,1,function(looprow){
thresh = looprow[1]
meth = as.character(looprow[2])
fc = gsub("fdr","log2fc",meth)
res = unique.go[ENTREZID%in%diffex[get(meth)<thresh&abs(get(fc))>log2(1.25),ENTREZID]][,.(prob = 1-phyper(q=length(ENTREZID),m = N, n = NN-N,k = length(diffex[get(meth)<thresh,ENTREZID])),TERM,N,hit = length(ENTREZID)),.(GOID)]
nr.imm = length(unique(res)[GOID%in%offspring&p.adjust(prob,"fdr")<prob_thresh,GOID])
nr.tot = length(unique(res)[p.adjust(prob,"fdr")<prob_thresh,GOID])
data.frame(thresh,meth,nr.imm,nr.tot,nr.imm/nr.tot)
})
library(data.table)
library(plyr)
library(GO.db)
library(stringr)
library(grid)
library(gridExtra)
library(ggplot2)
library(mHG)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
#diffex = readRDS("../inst/extdata/method_comp_logfc_qvalue.rds")
diffex = readRDS("../inst/extdata/comb_fdr_logfc.rds")
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
results_r = ldply(results)
setDT(results_r)
results_r[,meth:=gsub("zlm_fix","zlmfix",meth)]
results_r[,rate := nr.imm/nr.tot]
results_r[,thresh:=as.numeric(as.character(thresh))]
results_r[,method_global := str_split_fixed(meth,"_",3)[,1]]
results_r[,withng := factor(str_split_fixed(meth,"_",3)[,2],labels=c("No CDR control","CDR control"))]
p1 = ggplot(results_r[!(method_global%in%"zlmfix")])+aes(x=thresh,y=rate,color=method_global)+geom_point()+geom_line()+scale_x_continuous("FDR Threshold")+scale_y_continuous("Proportion of Immune\nSpecific GO Modules")+facet_wrap(~withng)+scale_color_brewer("Method",palette = 2,type="qual",limits=c("limma","zlm","deseq","edger","scde"),labels=c("Limma","MAST","DESeq","EdgeR","SCDE"))+theme_gray()
leg = g_legend(p1)
p1
pdf(file="../inst/extdata/output/SuppFig_10_a.pdf",width=6,height=4)
grid.draw(p1)
dev.off()
pdf(file="../inst/extdata/output/SuppFig_10_a.pdf",width=6,height=4)
p1
dev.off()
grid.draw
p1
library(abind)
library(arm)
library(data.table)
library(ggplot2)
library(grid)
library(devtools)
install_github("RGlab/MAST")
library(MAST)
library(mvtnorm)
library(GSEABase)
library(limma)
library(MCMCpack)
library(pheatmap)
library(GGally)
library(RColorBrewer)
library(reshape2)
library(AnnotationDbi)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
knitr::opts_chunk$set( fig.width = 14,
echo      = FALSE,
warning   = FALSE,
message   = FALSE )
min_gene_in_module <- 5
FCTHRESHOLD        <- log2(1.5)
nrep           <- 10
options("mc.cores"=detectCores())
set.seed(123123)
#install.packages("MASTDataPackage",repos="http://gull.fhcrc.org")
library(MASTDataPackage)
data(MASTDataPackage)
sca_mait_original <- sca_mait
sca_mait          <- subset(sca_mait,nGeneOn>4000)
eid               <- select(TxDb.Hsapiens.UCSC.hg19.knownGene,
keys=fData(sca_mait)$entrez,
keytype="GENEID",
columns=c("GENEID","TXNAME"))
ueid              <- unique(na.omit(eid)$GENEID)
sca_mait          <- sca_mait[,fData(sca_mait)$entrez%in%ueid]
MAST:::layer(sca_mait)   <- "tpm"
sca_mait_filtered <- sca_mait
unlogged          <- 2^exprs(sca_mait)-1
tt <- thresholdSCRNACountMatrix( unlogged              ,
nbins          = 20   ,
min_per_bin    = 30   ,
return_log     = TRUE
)
#par(mfrow=c(6,5))
#plot(tt)
fd_filt                   <- fData(sca_mait)
fd_filt$cutpoint          <- tt$cutpoint[as.character(tt$bin)]
esetAll<-abind(sca_mait@.Data, atpm=tt$counts_threshold, along=3)
sca_mait_filtered<-FromMatrix('SingleCellAssay',esetAll,
cData(sca_mait_filtered),fd_filt)
dimnames(sca_mait_filtered)[[3]]<-dimnames(esetAll)[[3]]
MAST:::layer(sca_mait_filtered)<-"atpm"
sca_mait_filtered         <- sca_mait_filtered[,freq(sca_mait_filtered)>0.2]
sca                       <- sca_mait_filtered
MAST:::layer(sca)<-"atpm"
zlm_cond          <-readRDS( file = "zlm_cond.rds"   )
zlm_cond_sh       <-readRDS( file = "zlm_cond_sh.rds"   )
res_gene_hurdle   <-readRDS( file = "res_gene_hurdle.rds"   )
res_gene_ng_hurdle<-readRDS( file = "res_gene_ng_hurdle.rds"   )
zlm_cond          <-readRDS( file = "../inst/extdata/zlm_cond.rds"   )
zlm_cond          <-readRDS( file = "../inst/extdata/zlm_cond.rds"   )
zlm_cond_sh       <-readRDS( file = "../inst/extdata/zlm_cond_sh.rds"   )
res_gene_hurdle   <-readRDS( file = "../inst/extdata/res_gene_hurdle.rds"   )
res_gene_ng_hurdle<-readRDS( file = "../inst/extdata/res_gene_ng_hurdle.rds"   )
genes_signif<- res_gene_ng_hurdle[adj<0.01&abs(logFC)>FCTHRESHOLD][order(logFC)]#[1:100]
genes_notsig<- res_gene_ng_hurdle[adj>0.5 &abs(logFC)<FCTHRESHOLD][order(logFC)]#[1:900]
cc_sig_ng   <- coef(zlm_cond_sh,"C")[c(genes_signif$primerid,genes_notsig$primerid),]
cd_sig_ng   <- coef(zlm_cond_sh,"D")[c(genes_signif$primerid,genes_notsig$primerid),]
par(mfrow=c(6,2))
hist(cc_sig_ng[genes_signif$primerid,   "(Intercept)"]  ,main="signif  cont base")
hist(cc_sig_ng[genes_notsig$primerid,   "(Intercept)"]  ,main="not sig cont base")
hist(cc_sig_ng[genes_signif$primerid,   "conditionStim"],main="signif  cont stim")
hist(cc_sig_ng[genes_notsig$primerid,   "conditionStim"],main="not sig cont stim")
hist(cc_sig_ng[genes_signif$primerid,   "cngeneson"]    ,main="signif  cont cdr ")
hist(cc_sig_ng[genes_notsig$primerid,   "cngeneson"]    ,main="not sig cont cdr ")
hist(cd_sig_ng[genes_signif$primerid,   "(Intercept)"]  ,main="signif  disc base")
hist(cd_sig_ng[genes_notsig$primerid,   "(Intercept)"]  ,main="not sig disc base")
hist(cd_sig_ng[genes_signif$primerid,   "conditionStim"],main="signif  disc stim")
hist(cd_sig_ng[genes_notsig$primerid,   "conditionStim"],main="not sig disc stim")
hist(cd_sig_ng[genes_signif$primerid,   "cngeneson"]    ,main="signif  disc cdr ")
hist(cd_sig_ng[genes_notsig$primerid,   "cngeneson"]    ,main="not sig disc cdr ")
genes_signif<- res_gene_ng_hurdle[adj<0.01&abs(logFC)>FCTHRESHOLD][order(logFC)]#[1:100]
genes_notsig<- res_gene_ng_hurdle[adj>0.5 &abs(logFC)<FCTHRESHOLD][order(logFC)]#[1:900]
cc_sig_ng   <- coef(zlm_cond_sh,"C")[c(genes_signif$primerid,genes_notsig$primerid),]
cd_sig_ng   <- coef(zlm_cond_sh,"D")[c(genes_signif$primerid,genes_notsig$primerid),]
par(mfrow=c(6,2))
hist(cc_sig_ng[genes_signif$primerid,   "(Intercept)"]  ,main="signif  cont base")
hist(cc_sig_ng[genes_notsig$primerid,   "(Intercept)"]  ,main="not sig cont base")
hist(cc_sig_ng[genes_signif$primerid,   "conditionStim"],main="signif  cont stim")
hist(cc_sig_ng[genes_notsig$primerid,   "conditionStim"],main="not sig cont stim")
hist(cc_sig_ng[genes_signif$primerid,   "cngeneson"]    ,main="signif  cont cdr ")
hist(cc_sig_ng[genes_notsig$primerid,   "cngeneson"]    ,main="not sig cont cdr ")
hist(cd_sig_ng[genes_signif$primerid,   "(Intercept)"]  ,main="signif  disc base")
hist(cd_sig_ng[genes_notsig$primerid,   "(Intercept)"]  ,main="not sig disc base")
hist(cd_sig_ng[genes_signif$primerid,   "conditionStim"],main="signif  disc stim")
hist(cd_sig_ng[genes_notsig$primerid,   "conditionStim"],main="not sig disc stim")
hist(cd_sig_ng[genes_signif$primerid,   "cngeneson"]    ,main="signif  disc cdr ")
hist(cd_sig_ng[genes_notsig$primerid,   "cngeneson"]    ,main="not sig disc cdr ")
par(mfrow=c(1,2))
plot(zlm_cond_sh@coefD[,"conditionStim"],zlm_cond_sh@coefD[,"cngeneson"], main="D", xlab="stim",ylab="CDR")
plot(zlm_cond_sh@coefC[,"conditionStim"],zlm_cond_sh@coefC[,"cngeneson"], main="C", xlab="stim",ylab="CDR")
par(mfrow=c(1,2))
pairs(data.frame(zlm_cond_sh@coefD[genes_signif$primerid,"conditionStim"],zlm_cond_sh@coefD[genes_signif$primerid,"cngeneson"],zlm_cond_sh@coefC[genes_signif$primerid,"conditionStim"],zlm_cond_sh@coefC[genes_signif$primerid,"cngeneson"]))
par(mfrow=c(1,2))
pairs(data.frame(zlm_cond_sh@coefD[genes_notsig$primerid,"conditionStim"],zlm_cond_sh@coefD[genes_notsig$primerid,"cngeneson"],zlm_cond_sh@coefC[genes_notsig$primerid,"conditionStim"],zlm_cond_sh@coefC[genes_notsig$primerid,"cngeneson"]))
rep_list_no        <- readRDS( file = system.file( "extdata", "rep_list_no.rds", package="MASTDataPackage"       ) )
rep_list_cd        <- readRDS( file = system.file( "extdata", "rep_list_cd.rds", package="MASTDataPackage"       ) )
rep_list_limma_no  <- readRDS( file = system.file( "extdata", "rep_list_limma_no.rds", package="MASTDataPackage" ) )
rep_list_limma_cd  <- readRDS( file = system.file( "extdata", "rep_list_limma_cd.rds", package="MASTDataPackage" ) )
# rep_list_no        <- readRDS(file ="rep_list_no.rds"  )
# rep_list_cd        <- readRDS(file ="rep_list_cd.rds"  )
# rep_list_limma_no  <- readRDS(file ="rep_list_limma_no.rds"  )
# rep_list_limma_cd  <- readRDS(file ="rep_list_limma_cd.rds"  )
rep_list_no        <- readRDS( file = "../inst/extdata/rep_list_no.rds", package="MASTDataPackage"       )
rep_list_cd        <- readRDS( file = "../inst/extdata/rep_list_cd.rds", package="MASTDataPackage"       )
rep_list_limma_no  <- readRDS( file = "../inst/extdata/rep_list_limma_no.rds", package="MASTDataPackage" )
rep_list_limma_cd  <- readRDS( file = "../inst/extdata/rep_list_limma_cd.rds", package="MASTDataPackage" )
# rep_list_no        <- readRDS(file ="rep_list_no.rds"  )
# rep_list_cd        <- readRDS(file ="rep_list_cd.rds"  )
# rep_list_limma_no  <- readRDS(file ="rep_list_limma_no.rds"  )
# rep_list_limma_cd  <- readRDS(file ="rep_list_limma_cd.rds"  )
conditions=c("no CDR in TRUTH", "strong confounding", "moderate confounding", "no confounding")
dttmp=NULL
for(j in 1:4){
dttmp=rbind(dttmp,
rbind(data.frame(t(abind(lapply(rep_list_no,function(x)x[[j]]),along=2))[,c(2,1)],
model="MAST no CDR", condition=conditions[j]),
data.frame(t(abind(lapply(rep_list_cd,function(x)x[[j]]),along=2))[,c(2,1)],
model="MAST with CDR", condition=conditions[j]),
data.frame(t(abind(lapply(rep_list_limma_no,function(x)x[[j]]),along=2))[,c(2,1)],
model="limma no CDR", condition=conditions[j]),
data.frame(t(abind(lapply(rep_list_limma_cd,function(x)x[[j]]),along=2))[,c(2,1)],
model="limma with CDR", condition=conditions[j])
)
)
}
names(dttmp)[1:2]<-c("FP","TP")
dttmp$condition = factor(dttmp$condition)
#pdf("simulation_ROC_with_without_CDR.pdf",width=16,height=4)
ggplot(dttmp)+aes(x=FP,y=TP,group=model,color=model)+facet_grid(.~condition)+geom_abline(intercept=0,slope=1,linetype="dotted")+ stat_quantile(method = "rqss",quantiles = c(0.05, 0.95),linetype="dashed", lambda = 1)+ stat_quantile(method = "rqss",quantiles = c(0.5), lambda = 1)+ylim(0,1)+xlim(0,1)
#dev.off()
dttmp
rep_list_no        <- readRDS( file = "../inst/extdata/rep_list_no.rds")
rep_list_cd        <- readRDS( file = "../inst/extdata/rep_list_cd.rds" )
rep_list_limma_no  <- readRDS( file = "../inst/extdata/rep_list_limma_no.rds" )
rep_list_limma_cd  <- readRDS( file = "../inst/extdata/rep_list_limma_cd.rds" )
# rep_list_no        <- readRDS(file ="rep_list_no.rds"  )
# rep_list_cd        <- readRDS(file ="rep_list_cd.rds"  )
# rep_list_limma_no  <- readRDS(file ="rep_list_limma_no.rds"  )
# rep_list_limma_cd  <- readRDS(file ="rep_list_limma_cd.rds"  )
conditions=c("no CDR in TRUTH", "strong confounding", "moderate confounding", "no confounding")
dttmp=NULL
for(j in 1:4){
dttmp=rbind(dttmp,
rbind(data.frame(t(abind(lapply(rep_list_no,function(x)x[[j]]),along=2))[,c(2,1)],
model="MAST no CDR", condition=conditions[j]),
data.frame(t(abind(lapply(rep_list_cd,function(x)x[[j]]),along=2))[,c(2,1)],
model="MAST with CDR", condition=conditions[j]),
data.frame(t(abind(lapply(rep_list_limma_no,function(x)x[[j]]),along=2))[,c(2,1)],
model="limma no CDR", condition=conditions[j]),
data.frame(t(abind(lapply(rep_list_limma_cd,function(x)x[[j]]),along=2))[,c(2,1)],
model="limma with CDR", condition=conditions[j])
)
)
}
names(dttmp)[1:2]<-c("FP","TP")
dttmp$condition = factor(dttmp$condition)
#pdf("simulation_ROC_with_without_CDR.pdf",width=16,height=4)
ggplot(dttmp)+aes(x=FP,y=TP,group=model,color=model)+facet_grid(.~condition)+geom_abline(intercept=0,slope=1,linetype="dotted")+ stat_quantile(method = "rqss",quantiles = c(0.05, 0.95),linetype="dashed", lambda = 1)+ stat_quantile(method = "rqss",quantiles = c(0.5), lambda = 1)+ylim(0,1)+xlim(0,1)
