res_gene_nong <- merge(res_gene_nong, fd, by="primerid")
res_gene_hurdle_nong <- res_gene_nong[metric=="Pr(>Chisq)" & test.type=="hurdle"]
res_gene_hurdle_nong[,adj:=p.adjust(value,"fdr")]
lfc_nong<-getLogFC(zlm.nongeneson)[contrast=="conditionStim"]
setkey(lfc_nong,primerid)
setkey(res_gene_hurdle_nong,primerid)
res_gene_hurdle_nong<-merge(lfc_nong,res_gene_hurdle_nong)
nrow(res_gene_hurdle_nong[adj<0.01])
nrow(res_gene_hurdle[adj<0.01])
library(scales)
toplot=data.table(melt(100*(zlm.nongeneson@deviance-zlm@deviance)/zlm.nongeneson@deviance))
toplot=toplot[,X2:=factor(X2,labels=c("Continuous","Discrete"))]
p1<-ggplot(toplot)+geom_histogram(position="identity",alpha=0.5)+aes(x=value)+theme_linedraw()+plotheme+facet_wrap(~X2)+scale_x_continuous("% Deviance")
p1<-ggplot(toplot)+geom_boxplot()+aes(y=value,x=X2)+theme_linedraw()+plotheme+scale_y_log10("% Deviance")+scale_x_discrete("Component")
#Shalek data for this SFig
filtered<-sca_alex
percent_expressed<-0.1
thres<-"adapt"
tt <- thresholdSCRNACountMatrix(2^exprs(filtered) - 1, nbins = 20, min_per_bin = 30)
if (thres == "adapt") {
exprs(filtered) <- tt$counts_threshold
} else if (thres == "fixed") {
mat <- exprs(filtered)
mat[mat < 1/log(2)] <- 0
exprs(filtered) <- mat
}
expressed_genes <- colMeans(exprs(filtered) > 0) > percent_expressed
filtered <- filtered[, expressed_genes]
cData(filtered)$Stim <- factor(cData(filtered)$Stim,levels=c("Unstimulated","LPS","PAM","PIC"))
cData(filtered)$Time <- factor(cData(filtered)$Time)
filtered_nobaseline <- subset(filtered,!Stim%in%c("Unstimulated")) #drop Time 0
cData(filtered_nobaseline)$Stim <- factor(cData(filtered_nobaseline)$Stim)
cData(filtered_nobaseline)$Time <- factor(cData(filtered_nobaseline)$Time)
options(mc.cores = 7)
ng <- zlm.SingleCellAssay(~cngeneson+Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE)
nong <- zlm.SingleCellAssay(~Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE)
toplot.s<-data.table(melt(100*(nong@deviance-ng@deviance)/nong@deviance))
toplot.s=toplot.s[,X2:=factor(X2,labels=c("Continuous","Discrete"))]
p2<-ggplot(toplot.s)+geom_histogram(position="identity",alpha=0.5)+aes(x=value)+theme_linedraw()+plotheme+facet_wrap(~X2)+scale_x_continuous("% Deviance")
p2<-ggplot(toplot.s)+geom_boxplot()+aes(y=value,x=X2)+theme_linedraw()+plotheme+scale_y_log10("% Deviance")+scale_x_discrete("Component")
toplot.combined<-data.table(rbind(data.table(toplot,data="MAIT"),data.table(toplot.s,data="DC")))
setnames(toplot.combined,c("Gene","Component","pdev","Dataset"))
p3<-ggplot(toplot.combined[pdev>0])+geom_boxplot()+aes(x=Component,y=pdev)+facet_wrap(~Dataset)+theme_linedraw()+plotheme+coord_trans(ytrans=MIMOSA:::asinh_trans(1))+scale_y_continuous("% Deviance Explained")+theme(axis.text.x=element_text(angle=45,hjust=1))+scale_x_discrete("Model Component")
pdf(file="../inst/extdata/output/Supplementary_Figure_4.pdf",width=4,height=3)
print(p3)
dev.off()
cat("Mean % Deviance")
kable(ddply(toplot.combined[pdev>=0],.(Dataset,Component),function(x)mean(x$pdev)))
cat("% Deviance 90th Percentile")
kable(ddply(toplot.combined[pdev>=0],.(Dataset,Component),function(x)quantile(x$pdev,0.9)))
print(p3)
# Let's look at the top 40
genes_to_plot <- res_gene_hurdle[abs(logFC)>FCTHRESHOLD&adj<0.01][order(-abs(logFC),adj)][1:40,symbolid]
ggplot(dt_long[gene_id%in%genes_to_plot][,gene_id:=factor(gene_id,levels=genes_to_plot)],aes(x=condition, y=value,color=condition))+geom_violin()+geom_jitter()+facet_wrap(~gene_id)+ggtitle("Top 40 DE Genes in Activated MAIT Cells")
fd<-fData(sca)
fd$primerid<-fd$symbolid
colnames(sca)<-fd$symbolid
sca@featureData@data<-fd
FCTHRESHOLD<-0.58
genes_to_plot <- res_gene_hurdle[abs(logFC)>FCTHRESHOLD&adj<0.01][order(-abs(logFC),adj)][1:100,symbolid]
COMPASS::pheatmap(exprs(sca[,genes_to_plot]),row_annotation=cData(sca)[,"condition",drop=FALSE],main="Top 100 DE genes",col=rev(colorRampPalette(colors = brewer.pal(name="PiYG",n=10))(20)))
#boot strap
cache(boots <- bootVcov1(zlm, 50))
#dir.create("maits",recursive = TRUE,path="~/Dropbox/GoTeam/Projects/Paper-ZLM/")
module_file <- list.files("../inst/extdata/", pattern = module, full.names = TRUE)
gene_set <- getGmt(module_file)
gene_ids <- geneIds(gene_set)
sets_indices <- ids2indices(gene_ids, fd$symbolid)
# Only keep modules with at least min_gene_in_module
sets_indices <- sets_indices[sapply(sets_indices, length) >= min_gene_in_module]
cache(gsea <- gseaAfterBoot(zlm, boots, sets_indices, CoefficientHypothesis("conditionStim")))
t_stat <- melt(calcZ(gsea, testType = "normal"))
t_stat_wide <- dcast(t_stat, set ~ comp + metric)
t_stat <- data.frame(calcZ(gsea, testType = "normal", combined = "stouffer"))
t_stat$set <- rownames(t_stat)
t_stat_comb <- data.table(merge(t_stat_wide, t_stat, by = "set"))
setorder(t_stat_comb,P)
for (i in 1:10) {
genes_to_plot <- unlist(gene_ids[names(gene_ids) == as.character(t_stat_comb$set[i])])
gp <- ggplot(dt_long[gene_id %in% genes_to_plot], aes(x = condition, y = value,
color = condition)) + geom_violin() + geom_jitter() + facet_wrap(~gene_id) +
labs(title = paste0(t_stat_comb$set[i], ", Z=", round(t_stat_comb$Z[i],
2), ", P=", round(t_stat_comb$P[i], 2)))
print(gp)
}
options("mc.cores"=7)
#zlm.scores <- zlm.SingleCellAssay(~condition + cngeneson, sca, method = "bayesglm",
#    ebayes = TRUE, ebayesControl = list(method = "MLE", model = "H1"),hook=score_2_hook)
score_4_hook<-function(x){
if(all(x@fitted)){
class(x@fitC) <- c("glm","lm")
class(x@fitD) <- c("bayesglm","glm","lm")
wh <- !colnames(x@modelMatrix)%like%"cngeneson"
wh2 <- !names(coef(x@fitC))%like%"cngeneson"
fc <- x@modelMatrix[,!wh,drop=FALSE]%*%coef(x@fitC)[!wh2,drop=FALSE] #continuous CDR effect
fd <- arm::invlogit(x@modelMatrix[,c("(Intercept)","cngeneson"),drop=FALSE]%*%coef(x@fitD)[c("(Intercept)","cngeneson"),drop=FALSE]) #discrete CDR effect
R <- matrix((x@response-fc*fd),nrow=1) #residuals corrected for ngeneson in the continuous part
colnames(R) <- names(residuals(x@fitD))
R[x@response==0]<-0-fd
R
}
}
zlm.scores <- zlm.SingleCellAssay(~condition + cngeneson, sca, method = "bayesglm",
ebayes = TRUE, ebayesControl = list(method = "MLE", model = "H1"),hook=score_4_hook)
scores<-do.call(rbind,zlm.scores@hookOut)
rownames(scores)<-names(zlm.scores@hookOut)
genes_to_plot<-sapply(1:nrow(t_stat_comb),function(i){
unlist(gene_ids[names(gene_ids) == as.character(t_stat_comb$set[i])])
})
names(genes_to_plot)<-t_stat_comb$set
##Include the DE MAIT signature
mait_signature_genes_up <- res_gene_hurdle[abs(logFC)>FCTHRESHOLD&adj<0.01][order(-abs(logFC),adj)][1:50,][logFC>0,symbolid]
mait_signature_genes_down <- res_gene_hurdle=res_gene_hurdle[abs(logFC)>FCTHRESHOLD&adj<0.01][order(-abs(logFC),adj)][1:50,][logFC<0,symbolid]
genes_to_plot$"MAIT Activation [Up]"<-mait_signature_genes_up
genes_to_plot$"MAIT Activation [Down]"<-mait_signature_genes_down
genes_to_plot<-ldply(lapply(genes_to_plot,function(x)data.frame(x)))
colnames(genes_to_plot)<-c("set","gene")
scores<-(melt(scores))
colnames(scores)<-c("gene","cell","score")
scores<-(merge(genes_to_plot,scores,by="gene",all.y=TRUE))
condition<-cData(sca)[,"condition",drop=FALSE]
condition$cell<-rownames(condition)
scores<-(merge(scores,condition,by="cell",all.x=TRUE))
scores<-na.omit(scores)
scores<-data.table(scores)
scores=scores[,set:=factor(set)]
t_stat_comb[,adj:=p.adjust(P)]
scores$set<-sapply(as.character(scores$set),function(x)Kmisc::wrap(x,width = 25))
sets<-sapply(t_stat_comb[order(-abs(t_stat_comb$Z),t_stat_comb$adj),set][1:14],function(x)Kmisc::wrap(x,25))
sets<-gsub("\n$","",gsub(".\\(.+$","",sets[!sets%like%"TBA"]))[-2]
gsea_scores<-ggplot(scores[,set:=gsub("\n$","",gsub(".\\(.+$","",set))][set%in%sets,list(score=mean(score)),list(cell,set,condition)][,set:=factor(set,levels=sets)])+  geom_violin(show_guide=FALSE)+geom_jitter(show_guide=FALSE)+aes(x=condition,y=score,col=condition)+facet_wrap(~set)+theme_linedraw()+theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.line=element_line(colour="black"),legend.position="bottom")+scale_color_manual("",values = c(brewer.pal(name = "PiYG",n=3)[c(1)],"#5729EE"))
mait_signature_genes_down <- res_gene_hurdle=res_gene_hurdle[abs(logFC)>FCTHRESHOLD&adj<0.01][order(-abs(logFC),adj)][1:50,][logFC<0,symbolid]
mait_signature_genes_up = res_gene_hurdle[abs(logFC)>FCTHRESHOLD&adj<0.01][order(-abs(logFC),adj)][1:50,][logFC>0,symbolid]
mait_signature_genes_down=res_gene_hurdle[abs(logFC)>FCTHRESHOLD&adj<0.01][order(-abs(logFC),adj)][1:50,][logFC<0,symbolid]
class(C2)
cond_de_genes_ng
class(S2)
head(S2)
str(unstim)
unstim
stim
head(upper.tri(S2))
head(S2[upper.tri(S2)])
S2[upper.tri(S2)][1:10]
r.test(S2[upper.tri(S2)][1:10],n=sum(!unstim))
r.test(S2[upper.tri(S2)][1:10],n=sum(!unstim))$p
p.adjust(r.test(S2[upper.tri(S2)][1:10],n=sum(!unstim))$p,"fdr")
p.unstim.ng = -log10(p.adjust(r.test(S2[upper.tri(S2)],n=sum(unstim))$p))
p.stim.ng = -log10(p.adjust(r.test(S2.s[upper.tri(S2.s)],n=sum(unstim))$p))
p.unstim.nong = -log10(p.adjust(r.test(S1[upper.tri(S1)],n=sum(unstim))$p))
p.stim.nong = -log10(p.adjust(r.test(S1.s[upper.tri(S1.s)],n=sum(unstim))$p))
rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),
data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),
data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),
data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected"))
asinh(seq(0,1,l=100))
asinh(seq(0,1,l=100)*10)
asinh(seq(0,1,l=100)*100)
asinh(seq(0,1,l=100)*1000)
ggplot(rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),
data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),
data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),
data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected")))+geom_boxplot()+aes(x=CDR,y=asinh(p*1000))+facet_wrap(~Stim)
asinh(0)
asinh(0.001)
-asinh(0.001)
asinh(0.001*100)
asinh(0.001/100)
asinh(0.01/100)
asinh(0.1/100)
asinh(0.001/100)
asinh(0.001*10000)
asinh(0.001*100000)
asinh(0.01*100000)
asinh(0.1*100000)
asinh(0.00001*100000)
asinh(0.00000001*100000)
asinh(-0.00000001*100000)
asinh(-0.1*100000)
rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),
data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),
data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),
data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected"))[,fivenum(-log10(p*1000)),list(Stim,CDR)]
rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),
data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),
data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),
data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected"))[,fivenum(-log10((p+1e-10)*1000)),list(Stim,CDR)]
data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected"))[,fivenum(-log10((p+1e-5)*1000)),list(Stim,CDR)]
rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),
data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),
data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),
data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected"))[,fivenum(-log10((p+1e-5))),list(Stim,CDR)]
rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),
data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),
data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),
data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected"))[p>0,fivenum(-log10(p)),list(Stim,CDR)]
dcast(rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected"))[p>0,fivenum(-log10(p)),list(Stim,CDR)],Stim~CDR)
rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected"))[p>0,fivenum(-log10(p)),list(Stim,CDR)]
ggplot(rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),
data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),
data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),
data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected"))[p>0])+geom_boxplot()+aes(x=CDR,y=-log10(p))+facet_wrap(~Stim)
rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected"))[p>0,fivenum(-log10(p+.Machine$double.eps)),list(Stim,CDR)]
ggplot(rbind(data.table(p=p.unstim.ng,Stim="Unstim",CDR="corrected"),
data.table(p=p.stim.ng,Stim="Stim",CDR="corrected"),
data.table(p=p.unstim.nong,Stim="Unstim",CDR="uncorrected"),
data.table(p=p.stim.nong,Stim="Stim",CDR="uncorrected")))+geom_boxplot()+aes(x=CDR,y=p)+facet_wrap(~Stim)
rm(list=ls())
suppressPackageStartupMessages({
library(GGally)
library(grid)
library(ggplot2)
library(reshape2)
library(org.Hs.eg.db)
library(SingleCellAssay)
library(plyr)
library(glasso)
library(data.table)
library(GO.db)
library(hom.Hs.inp.db)
library(SingleCellAssay)
library(Matrix)
library(igraph)
library(ggplot2)
library(RColorBrewer)
library(org.Mm.eg.db)
library(GSEABase)
library(corpcor)
library(Rtsne)
library(SCRAMDataPackage)
})
data(SCRAMDataPackage)
data_dir <- "data"
if(packageVersion("SingleCellAssay")>="0.924"){
message("Version Okay")
}else{
stop("Wrong SingleCellAssay Version")
}
FCTHRESHOLD<-log2(1.5)
plotheme<-theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.line=element_line(colour="black"))
knitr::opts_chunk$set(list(echo=FALSE,eval=TRUE,message=FALSE,error=FALSE,warning=FALSE))
rm(list=ls())
suppressPackageStartupMessages({
library(GGally)
library(grid)
library(ggplot2)
library(reshape2)
library(org.Hs.eg.db)
library(SingleCellAssay)
library(plyr)
library(glasso)
library(data.table)
library(GO.db)
library(hom.Hs.inp.db)
library(MAST)
library(Matrix)
library(igraph)
library(ggplot2)
library(RColorBrewer)
library(org.Mm.eg.db)
library(GSEABase)
library(corpcor)
library(Rtsne)
library(MASTDataPackage)
})
data(SCRAMDataPackage)
data_dir <- "data"
if(packageVersion("SingleCellAssay")>="0.924"){
message("Version Okay")
}else{
stop("Wrong SingleCellAssay Version")
}
FCTHRESHOLD<-log2(1.5)
plotheme<-theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.line=element_line(colour="black"))
knitr::opts_chunk$set(list(echo=FALSE,eval=TRUE,message=FALSE,error=FALSE,warning=FALSE))
filtered<-sca_alex
percent_expressed<-0.1
thres<-"adapt"
tt <- thresholdSCRNACountMatrix(2^exprs(filtered) - 1, nbins = 20, min_per_bin = 30)
if (thres == "adapt") {
exprs(filtered) <- tt$counts_threshold
} else if (thres == "fixed") {
mat <- exprs(filtered)
mat[mat < 1/log(2)] <- 0
exprs(filtered) <- mat
}
expressed_genes <- colMeans(exprs(filtered) > 0) > percent_expressed
filtered <- filtered[, expressed_genes]
data <- exprs(filtered)
cd <- cData(filtered)
fd <- fData(filtered)
dt <- data.table(gene_id = fd$symbolid, t(data))
dt_long <- data.table(melt(dt))
load("../inst/extdata/clusters_shalek.rda")
CORE_ANTIVIRAL<-as.character(subset(clusters,CLUSTER=="Id")$GENE)
PEAKED_INFLAM<-as.character(subset(clusters,CLUSTER=="IIIc")$GENE)
SUSTAINED_INFLAM<-as.character(subset(clusters,CLUSTER=="IIId")$GENE)
ids=featureData(filtered)$primerid
ids.idx <- 1:length(ids)
#get all the GO IDS for all the genes
sym2go<-AnnotationDbi:::select(org.Mm.eg.db,keys=gsub("^(.)","\\U\\1",tolower(ids),perl=TRUE),columns="GOALL",keytype="SYMBOL")
sym2go <- na.omit(sym2go)
sym2go <- data.table(sym2go)
ids <- data.table(cbind(ids,ids.idx))
setkey(ids,ids)
sym2go=sym2go[,ids:=SYMBOL]
setkey(sym2go,ids)
#module_member is the gene index for the given module
BP <- sym2go[ONTOLOGYALL%in%"BP"]
sym2go <- merge(ids,sym2go)
BP <- BP[,module_member:=ids.idx,list(GOALL)]
getwd()
cData(filtered)$Stim <- factor(cData(filtered)$Stim,levels=c("Unstimulated","LPS","PAM","PIC"))
cData(filtered)$Time <- factor(cData(filtered)$Time)
filtered_nobaseline <- subset(filtered,!Stim%in%c("Unstimulated")) #drop Time 0
cData(filtered_nobaseline)$Stim <- factor(cData(filtered_nobaseline)$Stim)
cData(filtered_nobaseline)$Time <- factor(cData(filtered_nobaseline)$Time)
options(mc.cores=8)
fit.bystim <- zlm.SingleCellAssay(~cngeneson+Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE,hook=deviance_residuals_hook,lambda=0.1)
fit<-fit.bystim
options(mc.cores=7)
#Fit a model without ngeneson for comparison
fit.bystim.nongeneson <- zlm.SingleCellAssay(~Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE,hook=deviance_residuals_hook,lambda=0.1)
#Test for any time effect
M <- matrix(0,nrow=ncol(coef(fit,"D")))
rownames(M) <- colnames(coef(fit,"D"))
M[colnames(coef(fit,"D"))%like%"LPS",] <- 1
M.time <- M
M.time['(Intercept)',]<- 0
anyTime <- lrTest(fit, hypothesis=M.time)
anyTime.sorted <- na.omit(anyTime[order(anyTime[,'hurdle','Pr(>Chisq)']),'hurdle',])
lfc.anytime<-getLogFC(fit)[contrast%like%"Time"]
res_gene_hurdle<-data.table(dcast(melt(anyTime.sorted),primerid~metric))
res_gene_hurdle=res_gene_hurdle[,adj:=p.adjust(`Pr(>Chisq)`,"fdr")]
#test with no ngeneson
nong.test<-lrTest(fit.bystim.nongeneson, hypothesis=M.time[-2,,drop=FALSE])
nong.test <- na.omit(nong.test[order(nong.test[,'hurdle','Pr(>Chisq)']),'hurdle',])
nong.test<-data.table(dcast(melt(nong.test),primerid~metric))
nong.test=nong.test[,adj:=p.adjust(`Pr(>Chisq)`,"fdr")]
tg<-merge(lfc.anytime[contrast%like%"LPS"&contrast%like%"Time6h"],res_gene_hurdle,by="primerid")[order((logFC),adj)][1:100,primerid]
COMPASS::pheatmap(exprs(filtered_nobaseline[cData(filtered_nobaseline)$Time%in%c("1h","6h")&cData(filtered_nobaseline)$Stim%in%"LPS",as.character(tg)]))
vignette("MAIT Analysis")
rm(list=ls())
suppressPackageStartupMessages({
library(GGally)
library(grid)
library(ggplot2)
library(reshape2)
library(org.Hs.eg.db)
library(SingleCellAssay)
library(plyr)
library(glasso)
library(data.table)
library(GO.db)
library(hom.Hs.inp.db)
library(MAST)
library(Matrix)
library(igraph)
library(ggplot2)
library(RColorBrewer)
library(org.Mm.eg.db)
library(GSEABase)
library(corpcor)
library(Rtsne)
library(MASTDataPackage)
})
data(SCRAMDataPackage)
data_dir <- "data"
if(packageVersion("SingleCellAssay")>="0.924"){
message("Version Okay")
}else{
stop("Wrong SingleCellAssay Version")
}
FCTHRESHOLD<-log2(1.5)
plotheme<-theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.line=element_line(colour="black"))
knitr::opts_chunk$set(list(echo=FALSE,eval=TRUE,message=FALSE,error=FALSE,warning=FALSE))
filtered<-sca_alex
percent_expressed<-0.1
thres<-"adapt"
tt <- thresholdSCRNACountMatrix(2^exprs(filtered) - 1, nbins = 20, min_per_bin = 30)
if (thres == "adapt") {
exprs(filtered) <- tt$counts_threshold
} else if (thres == "fixed") {
mat <- exprs(filtered)
mat[mat < 1/log(2)] <- 0
exprs(filtered) <- mat
}
expressed_genes <- colMeans(exprs(filtered) > 0) > percent_expressed
filtered <- filtered[, expressed_genes]
data <- exprs(filtered)
cd <- cData(filtered)
fd <- fData(filtered)
dt <- data.table(gene_id = fd$symbolid, t(data))
dt_long <- data.table(melt(dt))
load("../inst/extdata/clusters_shalek.rda")
CORE_ANTIVIRAL<-as.character(subset(clusters,CLUSTER=="Id")$GENE)
PEAKED_INFLAM<-as.character(subset(clusters,CLUSTER=="IIIc")$GENE)
SUSTAINED_INFLAM<-as.character(subset(clusters,CLUSTER=="IIId")$GENE)
ids=featureData(filtered)$primerid
ids.idx <- 1:length(ids)
#get all the GO IDS for all the genes
sym2go<-AnnotationDbi:::select(org.Mm.eg.db,keys=gsub("^(.)","\\U\\1",tolower(ids),perl=TRUE),columns="GOALL",keytype="SYMBOL")
sym2go <- na.omit(sym2go)
sym2go <- data.table(sym2go)
ids <- data.table(cbind(ids,ids.idx))
setkey(ids,ids)
sym2go=sym2go[,ids:=SYMBOL]
setkey(sym2go,ids)
sym2go <- merge(ids,sym2go)
#module_member is the gene index for the given module
BP <- sym2go[ONTOLOGYALL%in%"BP"]
BP <- BP[,module_member:=ids.idx,list(GOALL)]
getwd90
getwd()
cData(filtered)$Stim <- factor(cData(filtered)$Stim,levels=c("Unstimulated","LPS","PAM","PIC"))
cData(filtered)$Time <- factor(cData(filtered)$Time)
filtered_nobaseline <- subset(filtered,!Stim%in%c("Unstimulated")) #drop Time 0
cData(filtered_nobaseline)$Stim <- factor(cData(filtered_nobaseline)$Stim)
cData(filtered_nobaseline)$Time <- factor(cData(filtered_nobaseline)$Time)
options(mc.cores=8)
fit.bystim <- zlm.SingleCellAssay(~cngeneson+Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE,hook=deviance_residuals_hook,lambda=0.1)
fit<-fit.bystim
options(mc.cores=7)
#Fit a model without ngeneson for comparison
fit.bystim.nongeneson <- zlm.SingleCellAssay(~Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE,hook=deviance_residuals_hook,lambda=0.1)
#Test for any time effect
M <- matrix(0,nrow=ncol(coef(fit,"D")))
rownames(M) <- colnames(coef(fit,"D"))
M[colnames(coef(fit,"D"))%like%"LPS",] <- 1
M.time <- M
M.time['(Intercept)',]<- 0
anyTime <- lrTest(fit, hypothesis=M.time)
anyTime.sorted <- na.omit(anyTime[order(anyTime[,'hurdle','Pr(>Chisq)']),'hurdle',])
lfc.anytime<-getLogFC(fit)[contrast%like%"Time"]
res_gene_hurdle<-data.table(dcast(melt(anyTime.sorted),primerid~metric))
res_gene_hurdle=res_gene_hurdle[,adj:=p.adjust(`Pr(>Chisq)`,"fdr")]
#test with no ngeneson
nong.test<-lrTest(fit.bystim.nongeneson, hypothesis=M.time[-2,,drop=FALSE])
nong.test <- na.omit(nong.test[order(nong.test[,'hurdle','Pr(>Chisq)']),'hurdle',])
nong.test<-data.table(dcast(melt(nong.test),primerid~metric))
nong.test=nong.test[,adj:=p.adjust(`Pr(>Chisq)`,"fdr")]
tg<-merge(lfc.anytime[contrast%like%"LPS"&contrast%like%"Time6h"],res_gene_hurdle,by="primerid")[order((logFC),adj)][1:100,primerid]
COMPASS::pheatmap(exprs(filtered_nobaseline[cData(filtered_nobaseline)$Time%in%c("1h","6h")&cData(filtered_nobaseline)$Stim%in%"LPS",as.character(tg)]))
### Test for any stimulation effect
#Test for any Stim effect
M <- matrix(0,nrow=ncol(coef(fit,"D")))
rownames(M) <- colnames(coef(fit,"D"))
M[colnames(coef(fit,"D"))%like%"Stim",] <- 1
M.stim <- M
anyStim <- lrTest(fit, hypothesis=M.stim)
anyStim.sorted <- na.omit(anyStim[order(anyStim[,'hurdle','Pr(>Chisq)']),'hurdle',])
file.copy("~/Dropbox/GoTeam/Projects/Paper-ZLM/data/gene_association.mgi","~/Dropbox/GoTeam/Projects/Paper-ZLM/MASTDataPackage/inst/extdata/")
library(data.table)
library(limma)
library(GO.db)
gene_association= fread("../inst/extdata/gene_association.mgi",skip=6)
geneset_id      = split(toupper(gene_association$V3), gene_association$V5)
geneset_terms   = Term(GOTERM)[names(geneset_id)]
geneset_index   = ids2indices(geneset_id, fData(filtered_nobaseline)$symbolid)
#GSEA
options(mc.cores=7)
cache(boot_shalek <- bootVcov1(zlmfit=fit,R=100))
#sets <- dlply(BP[,module_member,list(GOALL)],.(GOALL),function(x)x$module_member)
#sets <- sets[(ldply(sets,length)>5)[,2]]
#sets <- llply(sets,function(x)as.numeric(x))
sets<-list()
sets[["CORE_ANTIVIRAL"]] <- CORE_ANTIVIRAL
sets[["CORE_ANTIVIRAL"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["CORE_ANTIVIRAL"]])
sets[["PEAKED_INFLAM"]] <- PEAKED_INFLAM
sets[["PEAKED_INFLAM"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["PEAKED_INFLAM"]])
sets[["SUSTAINED_INFLAM"]] <- SUSTAINED_INFLAM
sets[["SUSTAINED_INFLAM"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["SUSTAINED_INFLAM"]])
#Load the blood transcriptional modules
load("/Users/gfinak/Documents/Projects/scRNASeq/GSEA/emory_blood_transcript_modules.rda")
gene_names <- rownames(coef(fit,"D"))
for(i in seq_along(emory_blood_transcript_modules)){
sets[[names(emory_blood_transcript_modules)[i]]] <- which(gene_names%in%emory_blood_transcript_modules[[i]])
}
sets<-c(sets,geneset_index)
colnames(coef(fit,"D"))
hyp <- lapply(colnames(coef(fit,"D"))[colnames(coef(fit,"D"))%like%"Time"],function(x)CoefficientHypothesis(x))
sets<-sets[names(which(unlist(lapply(sets,length))>5))] #at least 5 genes
cache(gsea.time <- lapply(hyp,function(x)gseaAfterBoot(fit,boot_shalek,sets,hypothesis=x,control = list(n_randomize = Inf,var_estimate = "bootall"))))
boot_shalek
sets<-list()
sets[["CORE_ANTIVIRAL"]] <- CORE_ANTIVIRAL
sets[["CORE_ANTIVIRAL"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["CORE_ANTIVIRAL"]])
sets[["PEAKED_INFLAM"]] <- PEAKED_INFLAM
sets[["PEAKED_INFLAM"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["PEAKED_INFLAM"]])
sets[["SUSTAINED_INFLAM"]] <- SUSTAINED_INFLAM
sets[["SUSTAINED_INFLAM"]] <- which(featureData(filtered_nobaseline)$primerid%in%sets[["SUSTAINED_INFLAM"]])
#Load the blood transcriptional modules
load("../inst/extdata/emory_blood_transcript_modules.rda")
getwd()
load("/Users/gfinak/Documents/Projects/scRNASeq/GSEA/emory_blood_transcript_modules.rda")
file.copy("~/Documents/Projects/scRNASeq/GSEA/emory_blood_transcript_modules.rda", "~/Dropbox/GoTeam/Projects/Paper-ZLM/MASTDataPackage/inst/extdata/")
load("../inst/extdata//emory_blood_transcript_modules.rda")
load("../inst/extdata/emory_blood_transcript_modules.rda")
gene_names <- rownames(coef(fit,"D"))
for(i in seq_along(emory_blood_transcript_modules)){
sets[[names(emory_blood_transcript_modules)[i]]] <- which(gene_names%in%emory_blood_transcript_modules[[i]])
}
sets<-c(sets,geneset_index)
colnames(coef(fit,"D"))
hyp <- lapply(colnames(coef(fit,"D"))[colnames(coef(fit,"D"))%like%"Time"],function(x)CoefficientHypothesis(x))
sets<-sets[names(which(unlist(lapply(sets,length))>5))] #at least 5 genes
cache(gsea.time <- lapply(hyp,function(x)gseaAfterBoot(fit,boot_shalek,sets,hypothesis=x,control = list(n_randomize = Inf,var_estimate = "bootall"))))
gc(reset=TRUE)
cache(gsea.time <- lapply(hyp,function(x)gseaAfterBoot(fit,boot_shalek,sets,hypothesis=x,control = list(n_randomize = Inf,var_estimate = "bootall"))))
(gsea.time <- lapply(hyp,function(x)gseaAfterBoot(fit,boot_shalek,sets,hypothesis=x,control = list(n_randomize = Inf,var_estimate = "bootall"))))
gc(reset=TRUE)
rm(list=ls())
